1. Entity --> Dto 변환 / Dto --> Entity 변환
2. 관례적으로 Spring MVC 패턴에서는 Service 에서만 Entity 사용하고 Controller 에서는 Dto 사용(역활 책임 분담)
    --> Dto 수정해도 db에 영향 없다. entity 수정하면 db에 영향 있따
        --> 그러므로 즉] entity 매핑은 비지니스적인 요소로 중요함.
            Dto --> entity 적음
            entity --> Dto 많음 === **Dto 의 내용이 많기 때문**

3. Dto 에는 entity 로 변환하는 메소드 필요!!, entity 에는 Dto 로 변환하는 메소드 필요.
    --> 주로 등록 / 수정 Dto 에는 entity 로 변환 하는 메소드 필요
    --> 주로 조횔 할때 entity 에는 Dto 로 변환하는 메소드 필요



JPA : 직접 SQL 을 작성하지 않고 쉽게 CRUD SQL 제공하는 라이브러리 / 프레임 워크
    1. .save( 저장할 엔티티 ) : 지정한 엔티티를 데이터베이스에 저장
    2. .findById( pk 번호 ) : 지정한 pk 번호르 엔티티 1개를 조회 <Optional>
    3. .findAll() : 모든 엔티티를 조회
    4. .delete() :






gksk dltkddml

































리눅스 / 유닉스 계열 운영체제의 기본 명령어
    리눅스와 유닉스 명렁어는 쉘에서 입력할 수 있다.
    리눅스는 최상위 유저를 CLI 환경에서 # 으로 표시하며, 일반 유저를 $ 로 표시한다.
    uname 버전 확인
    uname -a 시스템의 모든 정보 출력
    uname -r 운영체제의 배포 버전 출력

    cat 파일 내용 출력
    cat 파일 내용 출력
    cat 파일 내용 출력

    fork 새로운 프로세스를 생서
    fork 새로운 프로세스를 생성
    fork 새로운 프로레스를  ㅅ애성
    fork 새로운 프로세스를 생성
    fork 새로운 프로세스를 생선

     chomod 특정 파일 또는 디렉토리의 퍼미션 수정
     chmod 특정 파일 또는 디렉토리의 펌시녀 수정
     chmod 특정 파일 또는 디렉토리의 퍼미션 숮어
     chmod 특정 파일 또는 디렉토리의 펌시녀 수정

     Gof의 디자인 패턴은 가장 일반적인 사례에 적용될수 있는 패턴들을 분류하여 정리함. 가장 ㅁ낳은 사용되는 디자인패턴
     GoF의 디자인 패턴은 가장 일반적 사례에 ㅈ거용될 수 ㅣㅇㅆ는 패턴들을 분류하여 정리함. 가장 많이 사용되는 디자인 패턴
     GoF의 디자인 패턴은 가장 일반적 사례에 적요될 수 있는 패턴들을 분류하여 정리함. 가장 만힝 ㅅ사용ㅇ되는 디자인 패턴

     생턴 패턴
     생성패턴 이란 객체를 생성하는 여러 방법으 ㄹ알려주는 패턴
     생서너 패턴 객체를 생서하는 여러 방법을 알려주느 패턴
     객체를 생성하는 여러 방법을 알려주는 패턴
     객체를 생성하는 여러 방벙르 알려주느 퍁턴
     객체를 생성하는 여러 방법을 알려주는 패턴
     Singletion Builder Prototype, Factory Method Abstract Factory
     Singleton Builder Prototypem, Factory method Abstrcact Factort
     Singleton Builder Prototype Factory Method Abstract Factory
     인스턴스를 ㅁ나드는 클래스를 서브 클래스에서 결정하도로 ㄱ하는 패턴
     인스턴스를 ㅁ나드는 클래스를 서브 클래스에서 결정 하도록 하는 패턴
     인스턴스를 만드는 클래스를 서브 클래스에서 결정하도록 하는 패턴
     인스턴스ㅡㄹ 만드는 클래스를 서브 클래스에서 결정 하도록 하는 패턴
     인스턴스를 만드는 클래스를 서브 클래스에서 결정하도로 ㄱ하느 ㄴ패ㅓㅌ
     생성할 객체의 종류를 명시하는데 원형이 되는 예시물을 이요하고 새로운 개게츨ㄹ 이 언형들을 복사함으로 ㅆ ㅓ 생성하는 패턴생
     생성할 객체의 종류를 명시하는데 원형이 되는 예시ㅂ물을 이용하고 새로운 객체를 이 웒여들을 보가ㅛ함으로 써 생서하는 패턴




하나 이상의 유사한 객체들을 묶어 공통된 특성을 표현한 데이터 추상화
공통된 속성과 연산(행위)를 갖는 객체의 ㅈ비합

자신 고유의 데이터를 가지며 크랠스에서 정의한 해우이를 수행
객체는 상태, 동작, 고유 식별자를 가진 모든 것이라 할 수 이따
객체의 상태는 속성값에 의해 정의된다.
데이터와 데이터를 처리하느 ㄴ메소드를 묶어 놓은 하나의 소프트웨어 모듈

클래스 객체 메서드 메시지 인스턴스 속성
메세지란 객체에게 어떤 행위를 하도록 지시하는 명령
메세지는 객체에게 어떤 해우이를 하도록 지시하는 명령
메세지는 객체에게 어떤 행위를 하도록 지시하는 명령
메세지는 객체에게 어떤 행위를 하도록 짓시하는 명령
메세지는 객체에게 어떤 해우이를 하도록 지시하는 명령

Encapsulation Encapsulation Encapsulation Encapsulation
외부와 경계를 만들고 필요한 인터페이스만을 밖으로 드러내느 ㄴ괒어
외부와 경계를 만들고 필요한 인터페이스만을 밖으로 드러내는 과정
정보 은닉과 밀정ㅂ한 관계가 있다
정보 은닉과 밀접한 관계가 있따
\인터페이스가 단순화된다, 소프트웨어 재사용성이 높아진다, 변경 발생시 오류의 파급효과가 적다
인터페이스가 단순화된다. 소프트웨어 재 사용성이 높아진다. 변경 발생ㅅ시 오류의 파급효과가 적다
인터페이스가 단순화된다. 소프트웨어 재사용성이 높아진다. 변경 발생 시 오류의 파급효과가 적다

상속성 상위 클래스의 속성과 메소드를 하위 클래스에서 재정의 없이 물려받아 사용하는 기법
상위 클래스의 속성과 메소드를 하위 클래스에서 재정의 없이 물려받아 사용하는 ㄱ기법
사우이 클래스의 속성과 메소드를 하위 클래스에세ㅓ 재정의 없이 물려받아 사용하나ㅡㄴ ㄴ기법
상위 클래스의 속성과 메소드를 하위 클래스에거 재저의 없이 물려받아 사용하는 기법
상위 클래스의 속성과 메소드를 하위 클래스에서 재저으이 없이 물려받아 사용ㅇ하는 기법
상위 클래스의 속성과 메소드를 하위 클래스에서 재정의 없이 물렵다아 사용하는 기법

추상화 공통 성징을 추출하여 클래스를 설정하는 기법
추상화 공통 성징ㄹ을 추출하여 클래스를 설정하는 기법
추상화 공통 성질을 추출하여 클래스를 설정하는 기법
추상화 공통 성질을 추출하여 클래스를 설정하는 기법
추상화 공통 성질을 추출하여 클래스를 설정하는 기법
공통 성질을 추출하여 클래스를 설정하는 기법
in part of 집답

객체지향 설계 원칙solid 단일 책임의 원칙 개방 폐쇄 원칙 리스코프 치환의 원칙 인터페이스 분리의 원칙
리스코프 치환의 원칙 서브 타입 상속받은 하위 클래스는 어디서나 자신의 기반 타입 으로 교체할 수 잇어야 한다는 원칙
리스코프 치환의 원칙 서브 타입 상속받은 하위 클래스는 어디서나 자신의 기반 타입 으로 교체 할 수 있어야 한다느 ㄴ원칙
리스코프 치환의 원칙 서브 타입 상속받은 하위 클래스는 어디서나 자신의 기반 ㅌ ㅏ입 으로 교체 할 수 있어얗 ㅏㅎㄴ다는 원칙
리스코프 치환읜 원칙 서브 타입 은 어디서나 자신의 기반 타입으로 교체 할 수 이어야 한다는 원칙
인터페이스 분리의 원칙
클라이언트는 자신이 사용하지 않은 ㄴ메서드와 의존관꼐를 맺으면 안된다.
클라이언트가 사용하지 않는 인ㅌ너페이스 때문에 영향을 받아서는 안된다
인터페이스 분리의 원칙 클라이언트는 자신이 ㅇ사용하지 않는 메서드와 읜23ㅗㄴ관께를 맺ㅈ으면 안된, 클라이언트가 사용하지 않는 인터페이스 때문에 영향을 받아서는 안된다.
인터페이스 분리의 원칙 클라이언트는 자신이 사용하지 않는 메서드와 의2존관꼐를 맺으면 클라이언트가 사용하지 않는 인터페이스 때문에 영향을 받아서는 안된다.

객체지향 방법론
제이콥슨 방법론 - 유스테이스
럼바우 방법론 - 객체지향분석
부치 방법론 - 미시적 거시적
코다와 요르단 방법론 - e-r다이어그램

객체지향 방법론
제이콥슨 방법론 - 유스케이스
럼바우 방법론 - 객체지향 분석
부치 방법론 - 미시적 거지석
코다와 요르단 방법론 - er다이어그램

객체지향 방법론
제이콥슨 방법론 - 유스케이스
럼바우 방법론 - 객체지향 분석
부치 방법론 - 미시적 거지석ㄷ
코다와 요르단 방버본 - 이알 다이어그램

객체지향 방법론
제이콥슨 방법론 - 유스케이스
럼바우 방법론 - 객체지향 분석
부치 방법론 - 거시적 미시적
코다와 요르단 방법론 - 이알 다이어그램

객체지향 방법론
제이콥슨 방법론 - 유스케이스
럼바우 방법론 - 객체지향 분석
부치 방법론 - 미시적 거시적
코다와 요르단 방법론 - 이알 다이어그램

객체지향 방법론
제이콥슨 방법ㄱ론=- 유ㅜ스케이스
럼바우 방법론 객쳄ㄴㅇ;ㅣ라머 ㄴㅇ;리ㅏ먼ㅇ ㄹ;ㅣ먀ㅏㄷㄱ ㅂ;ㅣ다ㅓㅁ ;이ㅑ머 뎅ㄴㅁㅇㄹ;ㅣㅏㅓㅗ\홗
확실히 타자치는 맛이 너무 중독적이긴 한데 적응되면 이것도 그냥 그저 그런것이 되지 ㅇ낳을 까 하는 생ㄱ깅 듭
