1. 프로젝트 만들기 : jdk17, gradle, groovy
2. 프로젝트 사용할 초기 라이브러리(dependencies)
    -https://start.spring.io/
3. 프로젝트 폴더 세팅
    java
        koreweb (최상위패키지)              : 임의 패키지명 생성, 주로 홈페이지명으로 한다.
            AppStart 클래스                : 스프링 시작 클래스
            controller 패키지              : HTTP 매핑 관련 클래스들
            model 패키지
                - entity 패키지            : DB 매핑 관련 클래스들
                - dto 패키지               : dto 데이터 이동객체 클래스들
                - repository 패키지        : 자바의 비지니스 로직 처리하는 클래스들
            service 패키지
    resources
        application.properties            :스프링 설정 파일
        static 패키지                      : 정적파일(cssmjs,img등)
            css 패키지
            js 패키지
            img 패키지
            favicon.ico
        templates 패키지                   : 동적파일( 타임리프, JSP 드읃ㅇ)

4. 기본적인 application.properties 준비
    1. server.port = 8080
    2. spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver
    3. spring.datasource.url = jdbc:mysql://localhost:3306/korweb

5. 레이아웃,  프론트엔드
    1. ***스킬로 인정***부트스트랩( 레이아웃 / 디자인 ) : https://getbootstrap.kr/
    2. 눈누( 폰트 ) : https://noonnu.cc/
    3. 코드팬( 디자인 ) : https://codepen.io/
    4. 어도비( 색상, 테마 ) : https://color.adobe.com/ko/

6. 로고 : favicon
    1. 이미지 구하기
    2. icon 확장자로 변환 : https://convertio.co/kr/
    3. favicon.ico 으로 파일명과 확장자로 static 폴더에 넣어주기
    4. 서버 재시작, 브라우저 ctrl + f5 (강력 새로고침)


===================================================================================================================
[ 웹 서버 ]
    1. 정의 : 클라이언트와 서버간의 HTTP 이용한 요청과 응답을 반환하는 프로그램
    2. 종류 :
        0. Apache : C 기반의 서버 프로그램, 정적페이지 지원, HTML/CSS/JS
        1. Tomcat 자바 기반의 웹서버 프로그램, 동적페이지지 지원, JSP/타임리프
        2. Apache Tomcat : 정작페이지와 동적 페이지를 모두 지원
            -> Spring boot 는 Apache Tomcat 을 내장하고 있다.
            -> 현재 spring boot 는 Apache Tomcat 10.1 버전 사용.
    3. 웹 서버 포트는 주로 8080
    4. 통신 흐름


    클라이언트(사용자) ----- HTTP request -----> 웹서버 (스프링:톰캣)
    - 브라우저(크롬)   <---- HTTP response ----- @Mapping @RequestBody 등등


[ 세션 ]
    1. 정의 : tomcat(톰캣) 서버에 데이터를 저장하고 관리할 수 있게 제공
        -> Spring boot 프레임워크 사용하면 자동으로 tomcat 내장 서버 실행
            -> @SpringBootApplication 시작하면 자동으로 실행된다.
    2. 목적 : 1.상태(데이터) 관리  2. 인증/권한  3. 효율적인 데이터 관리
    3. 주 사용처 : 데이터베이스에 저장하지 않고 실시간으로 처리하는 데이터 혹은 보안이 중요한 데이터들
        1. 로그인 상태 유지
        2. 장바구니 기능(비회원제)
        3. 사용자 설정 : 자동로그인, 테마 등등
        4. 실시간 처리
        등등
    4. 세션 객체
        1. HttpServletRequest : 서블릿(톰캣) 안에 데이터/정보 요청 객체
        2. .getSession() : 서블릿(톰캣) 안에 세션객체를 호출 함수.
    5. 세션에 정보 저장 하는 방벙
        - 세션에 정보 저장하는 방법
            1. @autowired private HttpServletRequest request;
            //(2) 요청 객체를 이용한 톰캣내 세션 객체를 반환한다.
            2. HttpSession httpSession = request.getSession();
            //(3) 세션 객체에 속성(새로운 값) 추가한다.
            3. httpSession.setAttribute("저장할 속성명",값);
                * 내가 새로운 속성명으로 값 추가 했다면 그 값 타입은 자동으로 Object 타입으로 변한다.

        - 세션에 저장된 정보 반환 하는 법
            1. @autowired private HttpServletRequest request;
            2. HttpSession httpSession = request.getSession();
               //(4) 세션 객체에 속성명의 값 반환한다.
            3. httpSession.getAttribute("조회할 속성명")
                * 내가 특정한 속성명의 값 호출 했다면 그 값 타입은 무조건 Object 타입이다.( 타입변환


        * 세션에 저장된 모든 정보들은 Object 타입으로 저장한다.
            -> Object 클래스/타입은 자바의 최상위 클래스로 모든 인스턴스들을 저장할 수 있는 타입이다.
            -> [ 상속 ] 다형성이란
                업캐스팅 ( 자동타입변환 ) : 상속 관계에 자식타입이 부모타입으로 변환,
                다운캐스팅 ( 강제타입변환 ) : 부모타입이 자식타입으로 변환.

        - 세션에 저장된 정보 초기화 하는법
            1. @autowired private HttpServletRequest request;
            2. HttpSession httpSession = request.getSession();
            3. httpSession.removeAttribute("제거할 속성명")





[실습] 포인트 긴으 추가 구현
    [ 요구사항 ]
    1. 회원가입 했을때 100 point 지급
    2. 로그인 했을때 1 point 지급
    3. 마이페이지에 포인트 내역 전체 출력
    4. 헤더(상단메뉴) 에는 로그인된 아이디 옆에 현재 포인트 출력
        * 구현할 서비스 :
              1)포인트 지급서비스 ,
              2)포인트 전체 조회 서비스,
              3)현재 내 포인트 보기 서비스
                * service 클래스와 controller 클래스는
                memberService , memberController 클래스 사용가능

[ 권장 개발 순서 ]
    1. jpa 데이터 베이스 설계
    2. entity, repository 단방향으로 구축
    3. service, controller 구축
    4. Talend API test
    -------------------
    5. Js : fetch 서비스 통신 구축
jpa
servic

















