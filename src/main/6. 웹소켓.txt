[ HTTP ]
    - 이동가능한 문자 전송 규약
    - 무상태유지( 상태가 없다. 요청과 응답을 별도로 저장하지 않는다)
    즉] HTTP 통신은 요청이 있을 경우에만 응답이 가능하다. 앞전 데이터는 유지 하지 않는다.
        *요청이 없으면 응답도 없다.* 연결구조 가 아니다

[ 웹 소켓 ] websocket
    1. 정의 : ws 프로토콜을 기반으로 클라이언트(유저/JS) 와 서버(서버/Springs/Node.js) 사이에 지속적인 *양방향* 연결
    2. 특징 : 지속적인 양방향 연결이 가능하고 *상태유지* 한다.
    3. 용어 :
        1. 소켓 : 통신의 종착점(엔드포인트 = 통신을 주고 받을때 도착 위치)
        특징 : 클라이언트 소켓 과 서버소켓 으로 부터 최초 연결 요청
    4. 구조
        클라이언트 소켓                                서버소켓
        [           ]                                [       ]
        === [1] 클라이언트 와 서버소켓 간의 연결==========================
        1. 클라이언트 소켓이 서버 소켓으로 최초 연결(접속) 요청 보낸다.
           ---------------------서버에 들어가고 싶다 -------------->
        2. 서버 소켓이 클라이언트 소켓의 요청을 등록(바인딩) 한다.         접속목록 : [ 접속한 클라이언트 소켓A, 접속한 클라이언트 소켓B]
           <--------------------클라이언트 접속 요청 허가 -----------
       =================================================================
       === [2] 클라이언트 소켓과 서버소켓 간의 메세지 주고 받기 =============
            --------------------서버야 안녕하세요 ----------------->
       3. 서버 소켓에 등록(상태유지)된 클라이언트 소켓이 서버소켓 에게 메세지 전송
            <-------------------그래 클라이언트 안녕 ---------------
       4. 서버 소켓에 등록(상태유지)된 클라이언트 소켓에게 서버소켓이 메세지 전송

       * 누가 먼저 할것 없이 양방향 연결 이므로 먼저 메세지를 보낼 수 있다.

   5. 활용처 : (HTTP 가 못하는 것) 1. 실시간 처리( 채팅, 알림, 배민(라이더위치기반), 보안, 관제, 웹게임  등등)
    * HTTP 와 다른점 : 웹소켓은 (서버-클라이언트) 서로 연결된 구조 이므로 요청이 업어도 서로 양방향 통신 가능하다.

   6. 구현 :
       [ JS 클라이언트 소켓 구현 ] JS 내장 클래스인 WebSocket
            1. JS에 new WebSocket('서버소켓주소') 이용한 소켓 생성한다.
            2.
                .onopen(event) => { 서버소켓과 접속 연동시 로직 구현 };
                .onclose(event) => {서버 소켓과 접속 닫혔을때 로직 구현};
                .onerror(event) => {서버 소켓과 에러가 발생했을시 로직 구현};
                .onmessage(event) => {서버 소켓으로부터 메세지를 받았았을때 로직 구현};
                *event : 해당하는 이벤트의 정보가 들어있는 객체
                .send(); : 텍스트만 전송이 가능하다 (주의할점 : 텍스트만 전송이 가능하다) JSON.stringify()함수 활용

       [ JAVA(Spring) 서버 소켓 구현 ]
            1. 그레이들에 webSocket 라이브러리 등록한다
                implementation 'org.springframework.boot:spring-boot-starter-websocket'
            2. 스프링 컨테이너에 웹소켓 주소 매핑 등록한다
                *특정한 클래스를 만들어서 아래와 같이 웹 서버소켓 매핑 주소 등록
                1. 클래스명 implements WeSocketConfigurer{}
                2. 추상메소드 구현하기
                    자동완성 : register + 엔터


                    @Configuration //해당 클래스를 스프링 컨테이너 빈(객체) 등록
                    @EnableWebSocket // 웹 소켓을 스프링 컨테이너 빈(객체) 등록
                    public class WebSocketConfig implements WebSocketConfigurer {

                    //[*] 서버소켓 역활을 하는 컨트롤러 클래스/객체 생성
                    @Autowired private 서버소켓클래스명 변수명;

                    //[*] WebSocketConfigurer 인터페이스의 추상메소드로 웹소켓 주소를 매핑하는 함수
                    @Override
                    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
                          registry.addHandler(매핑할클래스변수명(서버소켓클래스명),"서버소켓주소정의")
                    }//end f
                    }


    3. 서버소켓 아래와 같이 구현
        [ * ]  클래스로부터 상속 받은 하위 클래스는 서버소켓의 다양한 메소드를 상속 받을수 있다.
        -> 상속 받은 메소드들은 오버라이딩(재handleTextMessage정의) 통해 각 기능별 로직 구현한다

        @Component // 현재 클래스를 빈 등록한다
        public class ChatServerSocket extends TextWebSocketHandler {
            public void afterConnectionEstablished(WebSocketSession session) throws Exception {
                    System.out.println("클라이언트가 서버에게 접속 요청 한다.");
                }
        }

    4. TextWebSocketHandler 클래스의 주요 메소드
        (1) afterConnectionEstablished();   : 클라이언트 소켓이 서버소켓에 연동(접속)을 성공했을때 실행되는 함수
        (2) afterConnectionClosed();        : 클라이언트 소켓이 서버소켓과 연동(접속)이 끊겼을때 실행되는 함수
            연동이 끊기는 경우 : 웹브라우저[F5]/새로고침/페이지전환 등등, new WebSocket 객체가 초기화 되었을때
        (3) TextWebSocketHandler();         : 클라이언트 소켓이 서버소켓에게 메세지를 보내 왔을때 실행되는 함수.
                -> 받은클라이언트소켓객체.sendMessage(new TextMessage("보낼내용"))

[ JS(클라이언트소켓) 와 spring(서버소켓) 통신 ]
    (1) 두 소켓간의 연동 과정
1. 유저는 chat.html로 접속하면 chat.js 에 있는
    new WebSocket(wd://localhost:8080/socket/server)인해 지정된 주소로 웹서버에게 연동 요청한다.
2. 서버는 클라이언트의 연동 요청을 성공하면 자동으로 'afterConnectionEstablished' 함수가 실행된다.
    (2) 연동된 상태에서 메세지를 보내는 과정

